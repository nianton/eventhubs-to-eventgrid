{
    "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "projectName": {
            "type": "string",
            "defaultValue": "b2caudit",
            "metadata": {
                "description": "The project's name, will be used in the naming convention of the resources."
            }
        },
        "location": {
            "type": "string",
            "defaultValue": "[resourceGroup().location]",
            "metadata": {
                "description": "The location in which the Event Grid resources should be deployed."
            }
        },
        "eventGridSubscriptionName": {
            "type": "string",
            "defaultValue": "auditEventHubSubscription",
            "metadata": {
                "description": "The name of the Event Grid custom topic's subscription."
            }
        },
        "eventGridSubscriptionUrl": {
            "type": "string",
            "defaultValue": "https://myendpoints.accepts.eventgrid",
            "metadata": {
                "description": "The webhook URL to send the subscription events to. This URL must be valid and must be prepared to accept the Event Grid webhook URL challenge request. (RequestBin URLs are exempt from this requirement.)"
            }
        },
        "eventHubsSku": {
            "type": "string",
            "defaultValue": "Standard",
            "allowedValues": [
                "Basic",
                "Standard"
            ],
            "metadata": {
                "description": "If Event Hub will be used a destination for diagnostics, 'Standard' is required."
            }        
        },
        "eventHubsSkuCapacity": {
            "type": "int",
            "defaultValue": 1,
            "maxValue": 20,
            "minValue": 0
        },
        "eventHubsAutoInflateEnabled": {
            "type": "bool",
            "defaultValue": false
        },
        "eventHubsMaxThroughputUnits": {
            "type": "int",
            "defaultValue": 5,
            "maxValue": 20,
            "minValue": 0
        }
    },
    "variables": {
        "project": "[toLower(parameters('projectName'))]",
        "environment": "dev",
        "suffix": "[substring(uniqueString(subscription().subscriptionId), 0, 6)]",
        "storageAccountName": "[concat(variables('project'), variables('suffix'))]",
        "storageAccountid": "[concat(resourceGroup().id,'/providers/Microsoft.Storage/storageAccounts/', variables('storageAccountName'))]",
        "storageContainerName": "auditlogs",
        "storageDeadletterContainerName": "auditdeadletters",
        "eventHubsNamespaceName": "[concat(variables('project'),'-ehns')]",
        "functionAppPrefix":"[concat(variables('project'), '-eventhandler-', variables('suffix'))]",
        "functionAppName": "[concat(variables('functionAppPrefix'), '-func')]",
        "applicationInsightsName": "[concat(variables('functionAppPrefix'), '-appins')]",
        "hostingPlanName": "[concat(variables('functionAppPrefix'), '-asp')]",
        "eventHubsAuditName": "auditevents",
        "eventHubsIsBasic": "[equals(parameters('eventHubsSku'), 'Basic')]",
        "eventHubsAutoInflateEnabled": "[if(variables('eventHubsIsBasic'), bool('false'), bool(parameters('eventHubsAutoInflateEnabled')))]",
        "eventHubsMaxThroughputUnits": "[if(variables('eventHubsIsBasic'), 0, int(parameters('eventHubsMaxThroughputUnits')))]",
        "eventHubsRetentionDays": "[if(variables('eventHubsIsBasic'), 1, 7)]",
        "eventHubsAuthRuleName": "DiagnosticsAuditAuthRule",
        "eventHubsAuthRuleResourceId": "[resourceId('Microsoft.EventHub/namespaces/authorizationRules', variables('eventHubsNamespaceName'), variables('eventHubsAuthRuleName'))]",
        "sourceCodeRepositoryUrl": "https://github.com/nianton/eventhubs-to-eventgrid.git",
        "sourceCodeBranch": "master",
        "sourceCodeManualIntegration": true
    },
    "resources": [
        {
            "type": "Microsoft.EventHub/namespaces",
            "apiVersion": "2018-01-01-preview",
            "name": "[variables('eventHubsNamespaceName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "[parameters('eventHubsSku')]",
                "tier": "[parameters('eventHubsSku')]",
                "capacity": "[parameters('eventHubsSkuCapacity')]"
            },
            "properties": {
                "isAutoInflateEnabled": "[variables('eventHubsAutoInflateEnabled')]",
                "maximumThroughputUnits": "[variables('eventHubsMaxThroughputUnits')]",
                "zoneRedundant": true
            },
            "resources": [
                {
                    "type": "Microsoft.EventHub/namespaces/eventhubs",
                    "apiVersion": "2017-04-01",
                    "name": "[concat(variables('eventHubsNamespaceName'), '/', variables('eventHubsAuditName'))]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubsNamespaceName'))]"
                    ],
                    "properties": {
                        "messageRetentionInDays": "[variables('eventHubsRetentionDays')]",
                        "partitionCount": 4,
                        "status": "Active"
                    }
                },
                {
                    "type": "Microsoft.EventHub/namespaces/AuthorizationRules",
                    "apiVersion": "2017-04-01",
                    "name": "[concat(variables('eventHubsNamespaceName'), '/', variables('eventHubsAuthRuleName'))]",
                    "location": "[parameters('location')]",
                    "dependsOn": [
                        "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubsNamespaceName'))]"
                    ],
                    "properties": {
                        "rights": [
                            "Listen",
                            "Send"
                        ]
                    }
                }
            ]
        },        
        {
            "name": "[parameters('eventGridSubscriptionName')]",
            "type": "Microsoft.EventGrid/eventSubscriptions",
            "apiVersion": "2019-06-01",
            "dependsOn": [
                "[resourceId('Microsoft.Web/sites', variables('functionAppName'))]",
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubsNamespaceName'))]"
            ],
            "properties": {
                "topic": "[resourceId('Microsoft.Eventhub/Namespaces', variables('eventHubsNamespaceName'))]",
                "destination": {
                    "endpointType": "WebHook",
                    "properties": {
                        "endpointUrl": "[concat('https://', variables('functionAppName'), '.azurewebsites.net/runtime/webhooks/eventgrid?functionName=EventGridTrigger&code=', listKeys(concat('Microsoft.Web/sites/', variables('functionAppName'), '/host/default/'), '2016-08-01').functionKeys.default)]",
                        "maxEventsPerBatch": 20,
                        "preferredBatchSizeInKilobytes": 128
                    }
                },
                "filter": {
                    "includedEventTypes": [
                        "Microsoft.EventHub.CaptureFileCreated"
                    ],
                    "advancedFilters": [
                    ]
                },
                "labels": [
                ],
                "eventDeliverySchema": "EventGridSchema",
                "deadLetterDestination": {
                    "endpointType": "StorageBlob",
                    "properties": {
                        "resourceId": "[variables('storageAccountid')]",
                        "blobContainerName": "[variables('storageDeadletterContainerName')]"
                    }
                }
            }
        },
        {
            "name": "[variables('storageAccountName')]",
            "type": "Microsoft.Storage/storageAccounts",
            "apiVersion": "2018-07-01",
            "kind": "StorageV2",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Standard_LRS",
                "tier": "Standard"
            },
            "tags": {
                "displayName": "[variables('storageAccountName')]"
            },
            "properties": {
                "accessTier": "Hot"
            },
            "resources": [
                {
                    "name": "[concat('default/', variables('storageContainerName'))]",
                    "type": "blobServices/containers",
                    "apiVersion": "2018-07-01",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ]
                },
                {
                    "name": "[concat('default/', variables('storageDeadletterContainerName'))]",
                    "type": "blobServices/containers",
                    "apiVersion": "2018-07-01",
                    "dependsOn": [
                        "[variables('storageAccountName')]"
                    ]
                }
            ]
        },
        {
            "type": "Microsoft.Web/serverfarms",
            "apiVersion": "2018-02-01",
            "name": "[variables('hostingPlanName')]",
            "location": "[parameters('location')]",
            "sku": {
                "name": "Y1",
                "tier": "Dynamic"
            },
            "properties": {
                "name": "[variables('hostingPlanName')]",
                "computeMode": "Dynamic"
            },
            "tags": {
                "project": "[variables('project')]",
                "environment": "[variables('environment')]"
            }
        },
        {
            "apiVersion": "2015-08-01",
            "type": "Microsoft.Web/sites",
            "name": "[variables('functionAppName')]",
            "location": "[parameters('location')]",
            "kind": "functionapp",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName'))]",
                "[resourceId('microsoft.insights/components', variables('applicationInsightsName'))]",
                "[resourceId('Microsoft.EventHub/namespaces', variables('eventHubsNamespaceName'))]"
            ],
            "resources": [
                {
                    "apiVersion": "2018-11-01",
                    "name": "[concat(variables('functionAppName'), '/web')]",
                    "type": "Microsoft.Web/sites/sourcecontrols",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/sites/', variables('functionAppName'))]"
                    ],
                    "properties": {
                        "RepoUrl": "[variables('sourceCodeRepositoryUrl')]",
                        "branch": "[variables('sourceCodeBranch')]",
                        "IsManualIntegration": "[variables('sourceCodeManualIntegration')]"
                    }
                }
            ],
            "properties": {
                "serverFarmId": "[resourceId('Microsoft.Web/serverfarms', variables('hostingPlanName'))]",
                "siteConfig": {
                    "appSettings": [
                        {
                            "name": "FUNCTIONS_EXTENSION_VERSION",
                            "value": "~2"
                        },
                        {
                            "name": "WEBSITE_NODE_DEFAULT_VERSION",
                            "value": "10.14.1"
                        },
                        {
                            "name": "FUNCTIONS_WORKER_RUNTIME",
                            "value": "dotnet"
                        },
                        {
                            "name": "AzureWebJobsDashboard",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "AzureWebJobsStorage",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTAZUREFILECONNECTIONSTRING",
                            "value": "[concat('DefaultEndpointsProtocol=https;AccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(variables('storageAccountid'),'2015-05-01-preview').key1)]"
                        },
                        {
                            "name": "WEBSITE_CONTENTSHARE",
                            "value": "[toLower(variables('functionAppName'))]"
                        },
                        {
                            "name": "APPINSIGHTS_INSTRUMENTATIONKEY",
                            "value": "[reference(resourceId('microsoft.insights/components/', variables('applicationInsightsName')), '2015-05-01').InstrumentationKey]"
                        },
                        {
                            "name": "EventHubConnection",
                            "value": "[listkeys(variables('eventHubsAuthRuleResourceId'), '2017-04-01').primaryConnectionString]"
                        },
                        {
                            "name": "EventHubName",
                            "value": "[variables('eventHubsAuditName')]"
                        }
                    ]
                }
            },
            "tags": {
                "project": "[variables('project')]",
                "environment": "[variables('environment')]"
            }
        },
        {
            "apiVersion": "2018-05-01-preview",
            "name": "[variables('applicationInsightsName')]",
            "type": "microsoft.insights/components",
            "location": "[parameters('location')]",
            "tags": {
                "[concat('hidden-link:', resourceGroup().id, '/providers/Microsoft.Web/sites/', variables('applicationInsightsName'))]": "Resource"
            },
            "properties": {
                "ApplicationId": "[variables('applicationInsightsName')]",
                "Request_Source": "IbizaWebAppExtensionCreate"
            }
        }
    ],
    "outputs": {
    }
}